from dataclasses import dataclass

from fastapi import Depends

from app.config import get_config, Config
from app.core import exc
from app.core.crypto import decode_jwt
from app.core.models import User, TelegramAuthData
from app.core.repos import TelegramAuthRepo
from .base import AuthStrategy, LoginCredentials, AddAuthMethodData


@dataclass(frozen=True, kw_only=True)
class TelegramAddAuthMethodData(AddAuthMethodData):
    # 'name' inherited.
    token: str


@dataclass(frozen=True, kw_only=True)
class TelegramLoginCredentials(LoginCredentials):
    # 'scopes' inherited.
    token: str


@dataclass(frozen=True, kw_only=True)
class TelegramToken:
    tg_user_id: str
    tg_username: str
    tg_first_name: str | None
    tg_last_name: str | None
    tg_photo_url: str | None


class TelegramAuthStrategy(AuthStrategy[TelegramLoginCredentials, TelegramAddAuthMethodData, TelegramAuthData]):
    """
    Authentication via telegram requires only valid Telegram JWT generated by nto-tg-jwt.
    """

    def __init__(self,
                 tg_auth_repo: TelegramAuthRepo = Depends(),
                 config: Config = Depends(get_config)
                 ):
        self.tg_auth_repo = tg_auth_repo
        self.config = config

    def _decode_tg_token(self, token: str) -> TelegramToken:
        try:
            payload = decode_jwt(token, [
                "tg_username",
                "tg_first_name",
                "tg_last_name",
                "tg_photo_url"
            ], self.config.telegram.token_secret)
        except exc.InvalidToken:
            raise exc.InvalidAuthData()

        return TelegramToken(
            tg_user_id=str(payload["sub"]),
            tg_username=str(payload["tg_username"]),
            tg_first_name=str(payload["tg_first_name"]),
            tg_last_name=str(payload["tg_last_name"]),
            tg_photo_url=str(payload["tg_photo_url"])
        )

    def add_auth_method_to_user(self, user: User, data: TelegramAddAuthMethodData):
        # Raises InvalidAuthData.
        tg_token = self._decode_tg_token(data.token)

        user.telegram_auth = TelegramAuthData(
            tg_user_id=tg_token.tg_user_id,
            user=user
        )

    async def login_for_user_model_or_fail(self, schema: TelegramLoginCredentials) -> User:
        # Raises InvalidAuthData.
        tg_token = self._decode_tg_token(schema.token)

        # Find auth entry.
        if (tg_auth_entry := await self.tg_auth_repo.get_by_tg_user_id(tg_token.tg_user_id)) is None:
            raise exc.InvalidAuthData()

        # Update profile data.
        tg_auth_entry.tg_username = tg_token.tg_username
        tg_auth_entry.tg_first_name = tg_token.tg_first_name
        tg_auth_entry.tg_last_name = tg_token.tg_last_name
        tg_auth_entry.tg_photo_url = tg_token.tg_photo_url
        await self.tg_auth_repo.update(tg_auth_entry)

        return tg_auth_entry.user

    async def get_auth_method_data(self, user: User) -> TelegramAuthData | None:
        return user.telegram_auth
